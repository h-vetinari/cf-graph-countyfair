{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64"
  },
  "conda_build": {
   "error_overlinking": true
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "os_version": {
   "linux_64": "cos7",
   "linux_aarch64": "cos7"
  },
  "provider": {
   "linux_aarch64": "default"
  }
 },
 "feedstock_name": "libcudss",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "NVIDIA cuDSS is an optimized, first-generation GPU-accelerated Direct Sparse Solver library for solving linear systems with sparse matrices. Direct Sparse Solvers are an important part of numerical computing as they provide a general robust way of solving large linear systems without and are capable of taking advantage of both high compute throughput and memory bandwidth of the GPUs.",
   "doc_url": "https://docs.nvidia.com/cuda/cudss/",
   "home": "https://developer.nvidia.com/cudss",
   "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cudss/license.html",
   "summary": "The NVIDIA cuDSS development package."
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "libcudss",
   "recipe-maintainers": [
    "conda-forge/cuda",
    "kvoronin"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so.*"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss.so.0.4.0",
      "test -L $PREFIX/lib/libcudss.so.0",
      "test ! -f $PREFIX/lib/libcudss_static.a"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so",
     "include/cudss*",
     "lib/cmake/cudss/cudss-config*",
     "lib/cmake/cudss/cudss-targets*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/include/cudss.h",
      "test -f $PREFIX/include/cudss_distributed_interface.h",
      "test -L $PREFIX/lib/libcudss.so",
      "test ! -f $PREFIX/lib/libcudss_static.a",
      "test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "test -f $PREFIX/examples/cudss/cudss_simple.cpp"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_nccl.so.*"
    ],
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_nccl.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_nccl.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_openmpi.so.*"
    ],
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.0"
     ]
    }
   }
  ],
  "package": {
   "name": "libcudss-split",
   "version": "0.4.0.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "c_stdlib_stub"
   ]
  },
  "schema_version": 0,
  "source": [
   {
    "sha256": "64d77f5a3d2fafc99704da0c0e686d920265708358b9ced5755da713f3ff0620",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   }
  ]
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas-dev",
    "libcudss0",
    "nccl",
    "openmpi"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas",
    "libcudss-commlayer-mpi0",
    "libcudss-commlayer-nccl0",
    "libcudss0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "NVIDIA cuDSS is an optimized, first-generation GPU-accelerated Direct Sparse Solver library for solving linear systems with sparse matrices. Direct Sparse Solvers are an important part of numerical computing as they provide a general robust way of solving large linear systems without and are capable of taking advantage of both high compute throughput and memory bandwidth of the GPUs.",
   "doc_url": "https://docs.nvidia.com/cuda/cudss/",
   "home": "https://developer.nvidia.com/cudss",
   "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cudss/license.html",
   "summary": "The NVIDIA cuDSS development package."
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "libcudss",
   "recipe-maintainers": [
    "conda-forge/cuda",
    "kvoronin"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so.*"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "arm-variant * sbsa",
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss.so.0.4.0",
      "test -L $PREFIX/lib/libcudss.so.0",
      "test ! -f $PREFIX/lib/libcudss_static.a"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so",
     "include/cudss*",
     "lib/cmake/cudss/cudss-config*",
     "lib/cmake/cudss/cudss-targets*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples",
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/include/cudss.h",
      "test -f $PREFIX/include/cudss_distributed_interface.h",
      "test -L $PREFIX/lib/libcudss.so",
      "test ! -f $PREFIX/lib/libcudss_static.a",
      "test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "test -f $PREFIX/examples/cudss/cudss_simple.cpp"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_nccl.so.*"
    ],
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": [
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_nccl.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_nccl.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_openmpi.so.*"
    ],
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": [
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.0"
     ]
    }
   }
  ],
  "package": {
   "name": "libcudss-split",
   "version": "0.4.0.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "arm-variant * sbsa"
   ]
  },
  "schema_version": 0,
  "source": [
   {
    "sha256": "b52dfec1ee10bf49c706dd36d4808e7fa02f3c8a85f1c2bb7e0da48dcae51cb0",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   }
  ]
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "arm-variant",
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas-dev",
    "libcudss0",
    "nccl",
    "openmpi"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas",
    "libcudss-commlayer-mpi0",
    "libcudss-commlayer-nccl0",
    "libcudss0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "NVIDIA cuDSS is an optimized, first-generation GPU-accelerated Direct Sparse Solver library for solving linear systems with sparse matrices. Direct Sparse Solvers are an important part of numerical computing as they provide a general robust way of solving large linear systems without and are capable of taking advantage of both high compute throughput and memory bandwidth of the GPUs.",
   "doc_url": "https://docs.nvidia.com/cuda/cudss/",
   "home": "https://developer.nvidia.com/cudss",
   "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cudss/license.html",
   "summary": "The NVIDIA cuDSS development package."
  },
  "build": {
   "number": "2",
   "script": [
    "md -p %LIBRARY_PREFIX%\\examples\\cudss",
    "xcopy examples %LIBRARY_PREFIX%\\examples\\cudss /E /I /Y /V",
    "xcopy include %LIBRARY_INC% /E /I /Y /V",
    "xcopy lib %LIBRARY_LIB% /E /I /Y /V",
    "xcopy bin %LIBRARY_BIN% /E /I /Y /V",
    "xcopy cudss-targets-release.cmake %LIBRARY_LIB%\\cmake\\cudss\\ /I /Y /V"
   ]
  },
  "extra": {
   "feedstock-name": "libcudss",
   "recipe-maintainers": [
    "conda-forge/cuda",
    "kvoronin"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so.*"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss.so.0.4.0",
      "test -L $PREFIX/lib/libcudss.so.0",
      "test ! -f $PREFIX/lib/libcudss_static.a"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so",
     "include/cudss*",
     "lib/cmake/cudss/cudss-config*",
     "lib/cmake/cudss/cudss-targets*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/include/cudss.h",
      "test -f $PREFIX/include/cudss_distributed_interface.h",
      "test -L $PREFIX/lib/libcudss.so",
      "test ! -f $PREFIX/lib/libcudss_static.a",
      "test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "test -f $PREFIX/examples/cudss/cudss_simple.cpp"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_nccl.so.*"
    ],
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_nccl.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_nccl.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_openmpi.so.*"
    ],
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so.*"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "arm-variant * sbsa",
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss.so.0.4.0",
      "test -L $PREFIX/lib/libcudss.so.0",
      "test ! -f $PREFIX/lib/libcudss_static.a"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "lib/libcudss.so",
     "include/cudss*",
     "lib/cmake/cudss/cudss-config*",
     "lib/cmake/cudss/cudss-targets*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples",
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/include/cudss.h",
      "test -f $PREFIX/include/cudss_distributed_interface.h",
      "test -L $PREFIX/lib/libcudss.so",
      "test ! -f $PREFIX/lib/libcudss_static.a",
      "test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "test -f $PREFIX/examples/cudss/cudss_simple.cpp"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_nccl.so.*"
    ],
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": [
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_nccl.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_nccl.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": null,
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": null,
    "files": [
     "lib/libcudss_commlayer_openmpi.so.*"
    ],
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "arm-variant * sbsa",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": [
      "arm-variant * sbsa"
     ]
    },
    "test": {
     "commands": [
      "test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.0.4.0",
      "test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.0"
     ]
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "Library/bin/cudss64_0.dll"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "if not exist %LIBRARY_BIN%\\\\cudss64_0.dll exit 1"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "Library/lib/cudss.lib",
     "Library/include/cudss*",
     "Library/lib/cmake/cudss/*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples"
     ]
    },
    "test": {
     "commands": [
      "if not exist %LIBRARY_LIB%\\\\cudss.lib exit 1",
      "if not exist %LIBRARY_INC%\\\\cudss.h exit 1",
      "if not exist %LIBRARY_INC%\\\\cudss_distributed_interface.h exit 1",
      "if not exist %LIBRARY_LIB%\\\\cmake\\\\cudss\\\\cudss-config.cmake exit 1",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "Library/examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "if not exist %LIBRARY_PREFIX%\\\\examples\\\\cudss\\\\cudss_simple.cpp exit 1"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": {
     "skip": true
    },
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": {
     "skip": true
    },
    "files": null,
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": null
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": {
     "skip": true
    },
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": {
     "skip": true
    },
    "files": null,
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": null
    }
   }
  ],
  "package": {
   "name": "libcudss-split",
   "version": "0.4.0.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "arm-variant * sbsa"
   ]
  },
  "schema_version": 0,
  "source": [
   {
    "sha256": "64d77f5a3d2fafc99704da0c0e686d920265708358b9ced5755da713f3ff0620",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   },
   {
    "sha256": "b52dfec1ee10bf49c706dd36d4808e7fa02f3c8a85f1c2bb7e0da48dcae51cb0",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   },
   {
    "sha256": "d0801e78eab1be1240198e292bc496bb1804f2068975aaaf80ba31c3e400c625",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   },
   {
    "path": "cudss-targets-release.cmake"
   }
  ]
 },
 "name": "libcudss-split",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libcudss-commlayer-mpi",
   "libcudss-commlayer-mpi0",
   "libcudss-commlayer-nccl",
   "libcudss-commlayer-nccl0",
   "libcudss-dev",
   "libcudss-examples",
   "libcudss0"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/libcudss.json"
 },
 "raw_meta_yaml": "\n{% set version = \"0.4.0.2\" %}\n{% set soversion = \".\".join(version.split(\".\")[:3]) %}\n{% set somajor = version.split(\".\")[0] %}\n{% set platform = \"linux-sbsa\" %}  # [aarch64]\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"placeholder\" %}  # [osx]\n{% set extension = \"tar.xz\" %}  # [unix]\n{% set platform = \"windows-x86_64\" %}  # [win64]\n{% set extension = \"zip\" %}  # [win64]\n\n{% set cuda_compiler_version = cuda_compiler_version|default(\"None\") %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"12.0\").split(\".\")[0] %}\n\npackage:\n  name: libcudss-split\n  version: {{ version }}\n\nsource:\n  - url: https://developer.download.nvidia.com/compute/cudss/redist/libcudss/{{ platform }}/libcudss-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}  # [aarch64]\n    sha256: b52dfec1ee10bf49c706dd36d4808e7fa02f3c8a85f1c2bb7e0da48dcae51cb0  # [aarch64]\n  - url: https://developer.download.nvidia.com/compute/cudss/redist/libcudss/{{ platform }}/libcudss-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}  # [linux64]\n    sha256: 64d77f5a3d2fafc99704da0c0e686d920265708358b9ced5755da713f3ff0620  # [linux64]\n  - url: https://developer.download.nvidia.com/compute/cudss/redist/libcudss/{{ platform }}/libcudss-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}  # [win64]\n    sha256: d0801e78eab1be1240198e292bc496bb1804f2068975aaaf80ba31c3e400c625  # [win64]\n  # Overwrite cudss-targets-release.cmake to correct broken paths\n  - path: cudss-targets-release.cmake  # [win]\n\nbuild:\n  number: 2\n  skip: true  # [(cuda_compiler_version in (None, \"None\", \"11.8\")) or (not (linux64 or aarch64 or win64))]\n  script:  # [win]\n    - md -p %LIBRARY_PREFIX%\\examples\\cudss  # [win]\n    - xcopy examples %LIBRARY_PREFIX%\\examples\\cudss /E /I /Y /V  # [win]\n    - xcopy include %LIBRARY_INC% /E /I /Y /V  # [win]\n    - xcopy lib %LIBRARY_LIB% /E /I /Y /V  # [win]\n    - xcopy bin %LIBRARY_BIN% /E /I /Y /V  # [win]\n    - xcopy cudss-targets-release.cmake %LIBRARY_LIB%\\cmake\\cudss\\ /I /Y /V  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cuda') }}\n    - {{ compiler('cxx') }}\n    - {{ stdlib(\"c\") }}\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\noutputs:\n\n  - name: libcudss{{ somajor }}\n    build:\n      ignore_run_exports_from:\n        - {{ compiler('cuda') }}\n        - libcublas-dev\n      run_exports:\n        # Breaking changes every version until 1.0\n        - {{ pin_subpackage(\"libcudss\" ~ somajor, max_pin=\"x.x.x\") }}\n    files:\n      - lib/libcudss.so.*  # [linux]\n      - Library/bin/cudss64_0.dll  # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cuda') }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        - libcublas-dev\n      run:\n        - {{ pin_compatible('cuda-version', max_pin='x', min_pin='x') }}  # [cuda_compiler_version != \"None\"]\n        - libcublas\n      run_constrained:\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ pin_subpackage(\"libcudss-commlayer-nccl\" ~ somajor, exact=True) }}\n        - {{ pin_subpackage(\"libcudss-commlayer-mpi\" ~ somajor, exact=True) }}\n    test:\n      commands:\n        - test -f $PREFIX/lib/libcudss.so.{{ soversion }}  # [linux]\n        - test -L $PREFIX/lib/libcudss.so.{{ somajor }}  # [linux]\n        - test ! -f $PREFIX/lib/libcudss_static.a  # [linux]\n        - if not exist %LIBRARY_BIN%\\\\cudss64_{{ somajor }}.dll exit 1  # [win]\n    about:\n      summary: The NVIDIA cuDSS runtime library.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This is a runtime package only. Developers should install libcudss-dev to build with\n        cuDSS.\n\n  - name: libcudss-dev\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libcudss\" ~ somajor, max_pin=\"x.x.x\") }}\n    files:\n      - lib/libcudss.so  # [linux]\n      - include/cudss*  # [linux]\n      - lib/cmake/cudss/cudss-config*  # [linux]\n      - lib/cmake/cudss/cudss-targets*  # [linux]\n      - Library/lib/cudss.lib  # [win]\n      - Library/include/cudss*  # [win]\n      - Library/lib/cmake/cudss/*  # [win]\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libcudss\" ~ somajor, exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libcudss\" ~ somajor, exact=True) }}\n      run_constrained:\n        # Examples just run_constrained, so that downstream feedstocks don't get them by default\n        - {{ pin_subpackage(\"libcudss-examples\", max_pin=\"x.x\") }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    test:\n      files:\n        - test\n      requires:  # [build_platform == target_platform]\n        - {{ compiler(\"c\") }}  # [build_platform == target_platform]\n        - {{ compiler(\"cxx\") }}  # [build_platform == target_platform]\n        - {{ compiler('cuda') }}  # [build_platform == target_platform]\n        - {{ stdlib(\"c\") }}  # [build_platform == target_platform]\n        - cmake  # [build_platform == target_platform]\n        - ninja  # [build_platform == target_platform]\n      commands:\n        - test -f $PREFIX/include/cudss.h  # [linux]\n        - test -f $PREFIX/include/cudss_distributed_interface.h  # [linux]\n        - test -L $PREFIX/lib/libcudss.so  # [linux]\n        - test ! -f $PREFIX/lib/libcudss_static.a  # [linux]\n        - test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake  # [linux]\n        - if not exist %LIBRARY_LIB%\\\\cudss.lib exit 1  # [win]\n        - if not exist %LIBRARY_INC%\\\\cudss.h exit 1  # [win]\n        - if not exist %LIBRARY_INC%\\\\cudss_distributed_interface.h exit 1  # [win]\n        - if not exist %LIBRARY_LIB%\\\\cmake\\\\cudss\\\\cudss-config.cmake exit 1  # [win]\n        - cmake ${CMAKE_ARGS} -GNinja test  # [build_platform == target_platform]\n        - cmake --build .  # [build_platform == target_platform]\n    # Metadata will be inherited from top-level\n\n  - name: libcudss-examples\n    build:\n      noarch: generic\n    files:\n      - examples/cudss  # [linux]\n      - Library/examples/cudss  # [win]\n    test:\n      commands:\n        - test -f $PREFIX/examples/cudss/cudss_simple.cpp  # [linux]\n        - if not exist %LIBRARY_PREFIX%\\\\examples\\\\cudss\\\\cudss_simple.cpp exit 1  # [win]\n    about:\n      summary: The NVIDIA cuDSS examples package.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This package is examples only. Developers should install libcudss-dev to build with\n        cuDSS.\n\n# loadable modules; optional and only needed at runtime\n\n  - name: libcudss-commlayer-nccl\n    build:\n      skip: True  # [not linux]\n    requirements:\n      run:\n        - {{ pin_subpackage(\"libcudss-commlayer-nccl\" ~ somajor, exact=True) }}\n    test:\n      commands: []\n    about:\n      summary: Install this package to enable NCCL for cuDSS.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This is a meta-package which enables an optional feature. Developers should install\n        libcudss-dev to build with cuDSS.\n\n  - name: libcudss-commlayer-nccl{{ somajor }}\n    build:\n      skip: True  # [not linux]\n    files:\n      - lib/libcudss_commlayer_nccl.so.*  # [linux]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        # collect channel pinnings\n        - nccl\n        # constrain to version that we actually built with\n        - nccl 2.21.5\n      run_constrained:\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    test:\n      commands:\n        - test -f $PREFIX/lib/libcudss_commlayer_nccl.so.{{ soversion }}  # [linux]\n        - test -L $PREFIX/lib/libcudss_commlayer_nccl.so.{{ somajor }}  # [linux]\n    about:\n      summary: The NVIDIA cuDSS NCCL runtime module.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This is a runtime package only. Users should install the corresponding meta-package\n        instead. Developers should install libcudss-dev to build with cuDSS.\n\n  - name: libcudss-commlayer-mpi\n    build:\n      skip: True  # [not linux]\n    requirements:\n      run:\n        - {{ pin_subpackage(\"libcudss-commlayer-mpi\" ~ somajor, exact=True) }}\n    test:\n      commands: []\n    about:\n      summary: Install this package to enable MPI for cuDSS.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This is a meta-package which enables an optional feature. Developers should install\n        libcudss-dev to build with cuDSS.\n\n  - name: libcudss-commlayer-mpi{{ somajor }}\n    build:\n      skip: True  # [not linux]\n    files:\n      - lib/libcudss_commlayer_openmpi.so.*  # [linux]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        # collect channel pinning\n        - openmpi\n        # constrain to version that we actually built with\n        - openmpi >=4.1.0,<6\n      run_constrained:\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    test:\n      commands:\n        - test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.{{ soversion }}  # [linux]\n        - test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.{{ somajor }}  # [linux]\n    about:\n      summary: The NVIDIA cuDSS MPI runtime module.\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      description: >-\n        This is a runtime package only. Users should install the corresponding meta-package\n        instead. Developers should install libcudss-dev to build with cuDSS.\n\n# NOTE: Metadata inheritance from this section to the outputs is all or nothing. Only the\n# -dev package and the feedstock readme are inheriting this metadata.\nabout:\n  home: https://developer.nvidia.com/cudss\n  license: LicenseRef-NVIDIA-End-User-License-Agreement\n  license_file: LICENSE\n  license_url: https://docs.nvidia.com/cuda/cudss/license.html\n  summary: The NVIDIA cuDSS development package.\n  description: >-\n    NVIDIA cuDSS is an optimized, first-generation\n    GPU-accelerated Direct Sparse Solver library for solving linear systems\n    with sparse matrices. Direct Sparse Solvers are an important part\n    of numerical computing as they provide a general robust way of solving large\n    linear systems without and are capable of taking advantage of both high compute\n    throughput and memory bandwidth of the GPUs.\n  doc_url: https://docs.nvidia.com/cuda/cudss/\n\nextra:\n  recipe-maintainers:\n    - conda-forge/cuda\n    - kvoronin\n  feedstock-name: libcudss\n",
 "req": {
  "__set__": true,
  "elements": [
   "arm-variant",
   "c_compiler_stub",
   "c_stdlib_stub",
   "cuda-version",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "libcublas",
   "libcublas-dev",
   "libcudss-commlayer-mpi0",
   "libcudss-commlayer-nccl0",
   "libcudss0",
   "nccl",
   "openmpi"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "arm-variant",
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda-version",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libcublas-dev",
    "libcudss0",
    "nccl",
    "openmpi"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda-version",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libcublas",
    "libcudss-commlayer-mpi0",
    "libcudss-commlayer-nccl0",
    "libcudss0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "arm-variant * sbsa",
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version 12.6",
    "libcublas-dev",
    "libcudss0",
    "nccl",
    "nccl 2.21.5",
    "openmpi",
    "openmpi >=4.1.0,<6"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas",
    "libcudss-commlayer-mpi0",
    "libcudss-commlayer-nccl0",
    "libcudss0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 },
 "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip",
 "version": "0.4.0.2",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/libcudss.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "NVIDIA cuDSS is an optimized, first-generation GPU-accelerated Direct Sparse Solver library for solving linear systems with sparse matrices. Direct Sparse Solvers are an important part of numerical computing as they provide a general robust way of solving large linear systems without and are capable of taking advantage of both high compute throughput and memory bandwidth of the GPUs.",
   "doc_url": "https://docs.nvidia.com/cuda/cudss/",
   "home": "https://developer.nvidia.com/cudss",
   "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cudss/license.html",
   "summary": "The NVIDIA cuDSS development package."
  },
  "build": {
   "number": "2",
   "script": [
    "md -p %LIBRARY_PREFIX%\\examples\\cudss",
    "xcopy examples %LIBRARY_PREFIX%\\examples\\cudss /E /I /Y /V",
    "xcopy include %LIBRARY_INC% /E /I /Y /V",
    "xcopy lib %LIBRARY_LIB% /E /I /Y /V",
    "xcopy bin %LIBRARY_BIN% /E /I /Y /V",
    "xcopy cudss-targets-release.cmake %LIBRARY_LIB%\\cmake\\cudss\\ /I /Y /V"
   ]
  },
  "extra": {
   "feedstock-name": "libcudss",
   "recipe-maintainers": [
    "conda-forge/cuda",
    "kvoronin"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS runtime library."
    },
    "build": {
     "ignore_run_exports_from": [
      "cuda_compiler_stub",
      "libcublas-dev"
     ],
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "Library/bin/cudss64_0.dll"
    ],
    "name": "libcudss0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "libcublas-dev"
     ],
     "run": [
      "cuda-version",
      "libcublas"
     ],
     "run_constrained": [
      "libcudss-commlayer-nccl0",
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": [
      "if not exist %LIBRARY_BIN%\\\\cudss64_0.dll exit 1"
     ]
    }
   },
   {
    "build": {
     "run_exports": [
      "libcudss0"
     ]
    },
    "files": [
     "Library/lib/cudss.lib",
     "Library/include/cudss*",
     "Library/lib/cmake/cudss/*"
    ],
    "name": "libcudss-dev",
    "requirements": {
     "host": [
      "libcudss0"
     ],
     "run": [
      "libcudss0"
     ],
     "run_constrained": [
      "libcudss-examples"
     ]
    },
    "test": {
     "commands": [
      "if not exist %LIBRARY_LIB%\\\\cudss.lib exit 1",
      "if not exist %LIBRARY_INC%\\\\cudss.h exit 1",
      "if not exist %LIBRARY_INC%\\\\cudss_distributed_interface.h exit 1",
      "if not exist %LIBRARY_LIB%\\\\cmake\\\\cudss\\\\cudss-config.cmake exit 1",
      "cmake ${CMAKE_ARGS} -GNinja test",
      "cmake --build ."
     ],
     "files": [
      "test"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "ninja"
     ]
    }
   },
   {
    "about": {
     "description": "This package is examples only. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS examples package."
    },
    "build": {
     "noarch": "generic"
    },
    "files": [
     "Library/examples/cudss"
    ],
    "name": "libcudss-examples",
    "test": {
     "commands": [
      "if not exist %LIBRARY_PREFIX%\\\\examples\\\\cudss\\\\cudss_simple.cpp exit 1"
     ]
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable NCCL for cuDSS."
    },
    "build": {
     "skip": true
    },
    "name": "libcudss-commlayer-nccl",
    "requirements": {
     "run": [
      "libcudss-commlayer-nccl0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS NCCL runtime module."
    },
    "build": {
     "skip": true
    },
    "files": null,
    "name": "libcudss-commlayer-nccl0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "nccl",
      "nccl 2.21.5"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": null
    }
   },
   {
    "about": {
     "description": "This is a meta-package which enables an optional feature. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "Install this package to enable MPI for cuDSS."
    },
    "build": {
     "skip": true
    },
    "name": "libcudss-commlayer-mpi",
    "requirements": {
     "run": [
      "libcudss-commlayer-mpi0"
     ]
    },
    "test": {
     "commands": []
    }
   },
   {
    "about": {
     "description": "This is a runtime package only. Users should install the corresponding meta-package instead. Developers should install libcudss-dev to build with cuDSS.",
     "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
     "license_file": "LICENSE",
     "summary": "The NVIDIA cuDSS MPI runtime module."
    },
    "build": {
     "skip": true
    },
    "files": null,
    "name": "libcudss-commlayer-mpi0",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "c_stdlib_stub"
     ],
     "host": [
      "cuda-version 12.6",
      "openmpi",
      "openmpi >=4.1.0,<6"
     ],
     "run_constrained": null
    },
    "test": {
     "commands": null
    }
   }
  ],
  "package": {
   "name": "libcudss-split",
   "version": "0.4.0.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "c_stdlib_stub"
   ]
  },
  "schema_version": 0,
  "source": [
   {
    "sha256": "d0801e78eab1be1240198e292bc496bb1804f2068975aaaf80ba31c3e400c625",
    "url": "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-0.4.0.2_cuda12-archive.zip"
   },
   {
    "path": "cudss-targets-release.cmake"
   }
  ]
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas-dev",
    "libcudss0",
    "nccl",
    "openmpi"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda-version",
    "libcublas",
    "libcudss-commlayer-mpi0",
    "libcudss-commlayer-nccl0",
    "libcudss0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "c_stdlib_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  }
 }
}