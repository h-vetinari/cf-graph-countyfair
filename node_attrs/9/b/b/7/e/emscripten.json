{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "emscripten",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/emscripten-core/emscripten",
   "home": "https://emscripten.org/",
   "license": "MIT OR NCSA OR MPL-2.0",
   "license_file": "LICENSE",
   "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
  },
  "build": {
   "ignore_run_exports_from": [
    "python *",
    "nodejs *"
   ],
   "number": "3",
   "string": "h1234567_3"
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "emscripten",
   "version": "3.1.58"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "python 3.9"
   ],
   "host": [
    "binaryen",
    "nodejs 18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools"
   ],
   "run": [
    "python *",
    "binaryen",
    "nodejs >=18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools",
    "zlib"
   ],
   "run_constrained": [
    "python >=3.9"
   ]
  },
  "schema_version": 0,
  "source": {
   "patches": [
    "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
    "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
    "patches/0003-Changes-for-JSPI.patch",
    "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
    "patches/0005-Raise-when-no-argument-is-given.patch",
    "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
   ],
   "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
   "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
  },
  "test": {
   "commands": [
    "emcc --help",
    "emcc ./testfile.c",
    "node a.out.js"
   ],
   "files": [
    "testfile.c"
   ],
   "requires": [
    "python ==3.10.*"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_stdlib_stub",
    "cxx_compiler_stub",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs",
    "python",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "python"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "dev_url": "https://github.com/emscripten-core/emscripten",
   "home": "https://emscripten.org/",
   "license": "MIT OR NCSA OR MPL-2.0",
   "license_file": "LICENSE",
   "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
  },
  "build": {
   "ignore_run_exports_from": [
    "python *",
    "nodejs *"
   ],
   "number": "3",
   "string": "h1234567_3"
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "emscripten",
   "version": "3.1.58"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "python 3.9"
   ],
   "host": [
    "binaryen",
    "nodejs 18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools"
   ],
   "run": [
    "python *",
    "binaryen",
    "nodejs >=18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools",
    "zlib"
   ],
   "run_constrained": [
    "python >=3.9"
   ]
  },
  "schema_version": 0,
  "source": {
   "patches": [
    "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
    "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
    "patches/0003-Changes-for-JSPI.patch",
    "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
    "patches/0005-Raise-when-no-argument-is-given.patch",
    "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
   ],
   "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
   "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
  },
  "test": {
   "commands": [
    "emcc --help",
    "emcc ./testfile.c",
    "node a.out.js"
   ],
   "files": [
    "testfile.c"
   ],
   "requires": [
    "python ==3.10.*"
   ]
  }
 },
 "name": "emscripten",
 "osx_64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/emscripten-core/emscripten",
   "home": "https://emscripten.org/",
   "license": "MIT OR NCSA OR MPL-2.0",
   "license_file": "LICENSE",
   "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
  },
  "build": {
   "ignore_run_exports_from": [
    "python *",
    "nodejs *"
   ],
   "number": "3",
   "string": "h1234567_3"
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "emscripten",
   "version": "3.1.58"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "python 3.9"
   ],
   "host": [
    "binaryen",
    "nodejs 18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools"
   ],
   "run": [
    "python *",
    "binaryen",
    "nodejs >=18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools",
    "zlib"
   ],
   "run_constrained": [
    "python >=3.9"
   ]
  },
  "schema_version": 0,
  "source": {
   "patches": [
    "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
    "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
    "patches/0003-Changes-for-JSPI.patch",
    "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
    "patches/0005-Raise-when-no-argument-is-given.patch",
    "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
   ],
   "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
   "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
  },
  "test": {
   "commands": [
    "emcc --help",
    "emcc ./testfile.c",
    "node a.out.js"
   ],
   "files": [
    "testfile.c"
   ],
   "requires": [
    "python ==3.10.*"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_stdlib_stub",
    "cxx_compiler_stub",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs",
    "python",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "python"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "emscripten"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "osx_64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/emscripten.json"
 },
 "raw_meta_yaml": "{% set version = \"3.1.58\" %}\n\n# we only want a single python, but not make the package noarch\n{% set min_python = \"3.9\" %}\n# we just use a version here; doesn't seem to have much impact\n{% set min_nodejs = \"18\" %}\n\npackage:\n  name: emscripten\n  version: {{ version }}\n\nsource:\n  url: https://github.com/emscripten-core/emscripten/archive/{{ version }}.tar.gz\n  sha256: 45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65\n  patches:\n    # from https://github.com/pyodide/pyodide/tree/main/emsdk/patches\n    - patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch\n    - patches/0002-Add-useful-error-when-symbol-resolution-fails.patch\n    - patches/0003-Changes-for-JSPI.patch\n    - patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch\n    - patches/0005-Raise-when-no-argument-is-given.patch\n    - patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch\n\nbuild:\n  number: 3\n  string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n  ignore_run_exports_from:\n    - python *\n    - nodejs *\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}  # node modules need to compile native extensions\n    - {{ stdlib(\"c\") }}\n    - python {{ min_python }}\n  host:\n    - binaryen\n    - nodejs {{ min_nodejs }}\n    - lld\n    - clang\n    - clangxx\n    - llvm-tools\n  run:\n    - python *\n    - {{ pin_compatible(\"binaryen\", max_pin=\"x\") }}\n    - nodejs >={{ min_nodejs }}\n    - lld\n    - clang\n    - clangxx\n    - llvm-tools\n    # for google closure compiler\n    - zlib\n  run_constrained:\n    # otherwise linter complains (no py-constraints on non-noarch)\n    - python >={{ min_python }}\n\ntest:\n  requires:\n    # test that we can co-install with another python than above\n    - python ==3.10.*\n  files:\n    - testfile.c\n  commands:\n    - emcc --help\n    - emcc ./testfile.c\n    - node a.out.js\n\nabout:\n  home: https://emscripten.org/\n  license: MIT OR NCSA OR MPL-2.0\n  license_file: LICENSE\n  summary: Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes.\n  dev_url: https://github.com/emscripten-core/emscripten\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - h-vetinari\n",
 "req": {
  "__set__": true,
  "elements": [
   "binaryen",
   "c_stdlib_stub",
   "clang",
   "clangxx",
   "cxx_compiler_stub",
   "lld",
   "llvm-tools",
   "nodejs",
   "python",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_stdlib_stub",
    "cxx_compiler_stub",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "binaryen",
    "c_stdlib_stub",
    "clang",
    "clangxx",
    "cxx_compiler_stub",
    "lld",
    "llvm-tools",
    "nodejs"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "binaryen",
    "c_stdlib_stub",
    "clang",
    "clangxx",
    "cxx_compiler_stub",
    "lld",
    "llvm-tools",
    "nodejs",
    "python",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "python"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_stdlib_stub",
    "cxx_compiler_stub",
    "python 3.9"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs 18"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs >=18",
    "python *",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "python ==3.10.*"
   ]
  }
 },
 "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz",
 "version": "3.1.58",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/emscripten.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/emscripten-core/emscripten",
   "home": "https://emscripten.org/",
   "license": "MIT OR NCSA OR MPL-2.0",
   "license_file": "LICENSE",
   "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
  },
  "build": {
   "ignore_run_exports_from": [
    "python *",
    "nodejs *"
   ],
   "number": "3",
   "string": "h1234567_3"
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "emscripten",
   "version": "3.1.58"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_stdlib_stub",
    "python 3.9"
   ],
   "host": [
    "binaryen",
    "nodejs 18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools"
   ],
   "run": [
    "python *",
    "binaryen",
    "nodejs >=18",
    "lld",
    "clang",
    "clangxx",
    "llvm-tools",
    "zlib"
   ],
   "run_constrained": [
    "python >=3.9"
   ]
  },
  "schema_version": 0,
  "source": {
   "patches": [
    "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
    "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
    "patches/0003-Changes-for-JSPI.patch",
    "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
    "patches/0005-Raise-when-no-argument-is-given.patch",
    "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
   ],
   "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
   "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
  },
  "test": {
   "commands": [
    "emcc --help",
    "emcc ./testfile.c",
    "node a.out.js"
   ],
   "files": [
    "testfile.c"
   ],
   "requires": [
    "python ==3.10.*"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_stdlib_stub",
    "cxx_compiler_stub",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "binaryen",
    "clang",
    "clangxx",
    "lld",
    "llvm-tools",
    "nodejs",
    "python",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "python"
   ]
  }
 }
}