{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "sphinx-js",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "When you write a JavaScript library, how do you explain it to people? If\nit's a small project in a domain your users are familiar with, JSDoc's\nalphabetical list of routines might suffice. But in a larger project, it is\nuseful to intersperse prose with your API docs without having to copy and\npaste things.\n\nsphinx-js lets you use the industry-leading Sphinx documentation tool with\nJS projects. It provides a handful of directives, patterned after the\nPython-centric autodoc ones, for pulling JSDoc-formatted documentation into\nreStructuredText pages. And, because you can keep using JSDoc in your code,\nyou remain compatible with the rest of your JS tooling, like Google's\nClosure Compiler.\n",
   "home": "https://github.com/mozilla/sphinx-js",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Autodoc-style extraction into Sphinx for your JS project"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "PYTHON -m pip install . -vv --no-deps --no-build-isolation --disable-pip-version-check"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "sphinx-js",
   "version": "4.0.0"
  },
  "requirements": {
   "host": [
    "pip",
    "python 3.9",
    "setuptools"
   ],
   "run": [
    "jinja2 >2.0",
    "markupsafe",
    "nodejs",
    "parsimonious >=0.10.0,<0.11.0",
    "python >=3.9",
    "sphinx >=5"
   ]
  },
  "schema_version": 0,
  "source": {
   "sha256": "a467fdf3b114951251166043127edced6c99940d1221516a539f08158cee36de",
   "url": "https://pypi.org/packages/source/s/sphinx-js/sphinx_js-4.0.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "sphinx_js"
   ],
   "requires": [
    "pytest",
    "recommonmark",
    "sphinx",
    "pip",
    "python 3.9"
   ],
   "source_files": [
    "tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "markupsafe",
    "nodejs",
    "parsimonious",
    "python",
    "sphinx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "When you write a JavaScript library, how do you explain it to people? If\nit's a small project in a domain your users are familiar with, JSDoc's\nalphabetical list of routines might suffice. But in a larger project, it is\nuseful to intersperse prose with your API docs without having to copy and\npaste things.\n\nsphinx-js lets you use the industry-leading Sphinx documentation tool with\nJS projects. It provides a handful of directives, patterned after the\nPython-centric autodoc ones, for pulling JSDoc-formatted documentation into\nreStructuredText pages. And, because you can keep using JSDoc in your code,\nyou remain compatible with the rest of your JS tooling, like Google's\nClosure Compiler.\n",
   "home": "https://github.com/mozilla/sphinx-js",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Autodoc-style extraction into Sphinx for your JS project"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "PYTHON -m pip install . -vv --no-deps --no-build-isolation --disable-pip-version-check"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "sphinx-js",
   "version": "4.0.0"
  },
  "requirements": {
   "host": [
    "pip",
    "python 3.9",
    "setuptools"
   ],
   "run": [
    "jinja2 >2.0",
    "markupsafe",
    "nodejs",
    "parsimonious >=0.10.0,<0.11.0",
    "python >=3.9",
    "sphinx >=5"
   ]
  },
  "schema_version": 0,
  "source": {
   "sha256": "a467fdf3b114951251166043127edced6c99940d1221516a539f08158cee36de",
   "url": "https://pypi.org/packages/source/s/sphinx-js/sphinx_js-4.0.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "sphinx_js"
   ],
   "requires": [
    "pytest",
    "recommonmark",
    "sphinx",
    "pip",
    "python 3.9"
   ],
   "source_files": [
    "tests"
   ]
  }
 },
 "name": "sphinx-js",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "sphinx-js"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/sphinx-js.json"
 },
 "raw_meta_yaml": "{% set version = \"4.0.0\" %}\n\npackage:\n  name: sphinx-js\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/s/sphinx-js/sphinx_js-{{ version }}.tar.gz\n  sha256: a467fdf3b114951251166043127edced6c99940d1221516a539f08158cee36de\n\nbuild:\n  number: 0\n  noarch: python\n  script:\n    - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation --disable-pip-version-check\n\nrequirements:\n  host:\n    - pip\n    - python {{ python_min }}\n    - setuptools\n  run:\n    - jinja2 >2.0\n    - markupsafe\n    - nodejs\n    - parsimonious >=0.10.0,<0.11.0\n    - python >={{ python_min }}\n    - sphinx >=5\n\ntest:\n  requires:\n    - pytest\n    - recommonmark\n    - sphinx\n    - pip\n    - python {{ python_min }}\n  source_files:\n    - tests\n  imports:\n    - sphinx_js\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/mozilla/sphinx-js\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Autodoc-style extraction into Sphinx for your JS project\n\n  description: |\n    When you write a JavaScript library, how do you explain it to people? If\n    it's a small project in a domain your users are familiar with, JSDoc's\n    alphabetical list of routines might suffice. But in a larger project, it is\n    useful to intersperse prose with your API docs without having to copy and\n    paste things.\n\n    sphinx-js lets you use the industry-leading Sphinx documentation tool with\n    JS projects. It provides a handful of directives, patterned after the\n    Python-centric autodoc ones, for pulling JSDoc-formatted documentation into\n    reStructuredText pages. And, because you can keep using JSDoc in your code,\n    you remain compatible with the rest of your JS tooling, like Google's\n    Closure Compiler.\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n",
 "req": {
  "__set__": true,
  "elements": [
   "jinja2",
   "markupsafe",
   "nodejs",
   "parsimonious",
   "pip",
   "python",
   "setuptools",
   "sphinx"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "markupsafe",
    "nodejs",
    "parsimonious",
    "python",
    "sphinx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python 3.9",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2 >2.0",
    "markupsafe",
    "nodejs",
    "parsimonious >=0.10.0,<0.11.0",
    "python >=3.9",
    "sphinx >=5"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python 3.9",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "url": "https://pypi.org/packages/source/s/sphinx-js/sphinx_js-4.0.0.tar.gz",
 "version": "4.0.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/sphinx-js.json"
 }
}